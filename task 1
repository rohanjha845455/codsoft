import math

# Constants to represent players and empty cells
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY_CELL = '-'

def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

def evaluate(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2]:
            if board[i][0] == PLAYER_X:
                return 10
            elif board[i][0] == PLAYER_O:
                return -10

        if board[0][i] == board[1][i] == board[2][i]:
            if board[0][i] == PLAYER_X:
                return 10
            elif board[0][i] == PLAYER_O:
                return -10

    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == PLAYER_X:
            return 10
        elif board[0][0] == PLAYER_O:
            return -10

    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == PLAYER_X:
            return 10
        elif board[0][2] == PLAYER_O:
            return -10
            
    return 0

def is_moves_left(board):
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY_CELL:
                return True
    return False

def minimax(board, depth, is_maximizing, alpha, beta):
    score = evaluate(board)

    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if not is_moves_left(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY_CELL:
                    board[i][j] = PLAYER_X
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = EMPTY_CELL
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval

    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY_CELL:
                    board[i][j] = PLAYER_O
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = EMPTY_CELL
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def get_best_move(board):
    best_move = None
    best_score = -math.inf

    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY_CELL:
                board[i][j] = PLAYER_X
                move_score = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = EMPTY_CELL

                if move_score > best_score:
                    best_score = move_score
                    best_move = (i, j)

    return best_move

def main():
    # Initialize the Tic-Tac-Toe board
    board = [[EMPTY_CELL for _ in range(3)] for _ in range(3)]

    # Game loop
    print_board(board)
    while True:
        # Human player's turn
        while True:
            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter column (0-2): "))
                if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == EMPTY_CELL:
                    break
                else:
                    print("Invalid move! Try again.")
            except ValueError:
                print("Invalid input! Please enter integers.")
        
        board[row][col] = PLAYER_O
        print_board(board)

        # Check if human player wins or the board is full (draw)
        if evaluate(board) == -10:
            print("You win!")
            break
        if not is_moves_left(board):
            print("It's a draw!")
            break

        # AI player's turn
        ai_move = get_best_move(board)
        board[ai_move[0]][ai_move[1]] = PLAYER_X
        print("AI's move:")
        print_board(board)

        # Check if AI player wins or the board is full (draw)
        if evaluate(board) == 10:
            print("AI wins!")
            break
        if not is_moves_left(board):
            print("It's a draw!")
            break

if __name__ == "__main__":
    main()

import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def is_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(all(cell != "." for cell in row) for row in board)

def evaluate(board):
    if is_winner(board, "X"):
        return 1
    if is_winner(board, "O"):
        return -1
    return 0

def minimax(board, depth, maximizing_player, alpha, beta):
    if is_winner(board, "X"):
        return 1
    if is_winner(board, "O"):
        return -1
    if is_draw(board):
        return 0
    
    if maximizing_player:
        max_eval = float("-inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == ".":
                    board[row][col] = "X"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[row][col] = "."
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float("inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == ".":
                    board[row][col] = "O"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[row][col] = "."
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def best_move(board):
    best_eval = float("-inf")
    best_row = -1
    best_col = -1
    for row in range(3):
        for col in range(3):
            if board[row][col] == ".":
                board[row][col] = "X"
                eval = minimax(board, 0, False, float("-inf"), float("inf"))
                board[row][col] = "."
                if eval > best_eval:
                    best_eval = eval
                    best_row = row
                    best_col = col
    return best_row, best_col

def play_game():
    board = [["."]*3 for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    while True:
        row, col = best_move(board)
        board[row][col] = "X"
        print_board(board)
        if is_winner(board, "X"):
            print("AI wins!")
            break
        elif is_draw(board):
            print("It's a draw!")
            break
        
        user_row = int(input("Enter row (0-2): "))
        user_col = int(input("Enter column (0-2): "))
        if board[user_row][user_col] == ".":
            board[user_row][user_col] = "O"
            print_board(board)
            if is_winner(board, "O"):
                print("You win!")
                break
            elif is_draw(board):
                print("It's a draw!")
                break
        else:
            print("That cell is already taken. Try again.")

play_game()
